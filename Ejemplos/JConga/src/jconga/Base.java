/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jconga;

import baraja.Baraja;
import baraja.Carta;
import java.awt.event.MouseListener;
import java.util.ArrayList;



/**
 *
 * @author luiss
 */
public class Base extends javax.swing.JFrame {
    
    //Creamos un objeto para la baraja y uno para el mazo
    Baraja baraja = new Baraja();
    ArrayList<Carta> mazo = new ArrayList<>();
    
    //Creamos objetos para la mano del jugador y para su botonera
    ArrayList<Carta> mano = new ArrayList<>();
    PanelCarta[] botonesMano = new PanelCarta[8];
    
    //Creamos un objeto para guardar los jugadores participantes
    ArrayList<Jugador> jugadores = new ArrayList<>();
    
    //Variables auxiliares para el seguimiento de las acciones del juego
    int cartasSeleccionadas = 0;
    int cartasEnMano = 0;
    
    /**
     * Creates new form Base
     */
    public Base() {
        initComponents();
        
        PrepararVentana();
        
    }
    
    /**
     * Prepara la ventana para el juego.
     */
    private void PrepararVentana(){
        //Creamos un objeto Carta para representar la baraja
        Carta imgBaraja = new Carta(0, "reves");
        panelBaraja.setCarta(imgBaraja);
        //panelBaraja.ActualizarImagen();
        
        //Creamos y asignamos botones a la botonera del usuario
        botonesMano[0] = panelCarta0;
        botonesMano[1] = panelCarta1;
        botonesMano[2] = panelCarta2;
        botonesMano[3] = panelCarta3;
        botonesMano[4] = panelCarta4;
        botonesMano[5] = panelCarta5;
        botonesMano[6] = panelCarta6;
        botonesMano[7] = panelCarta7;
        
        //Añadimos el evento correspondiente a cada botón 
        for (PanelCarta btn : botonesMano) {
            btn.addMouseListener(
                    new java.awt.event.MouseAdapter() {
                        @Override
                        public void mouseClicked(java.awt.event.MouseEvent evt){
                            CartaSeleccionada(evt);
                        }
                    }
            );
        }
        
        //PARA PRUEBAS: creamos una partida con dos jugadores        
        Jugador j1 = new Jugador();
        Jugador j2 = new Jugador();
        
        jugadores.add(j1);
        jugadores.add(j2);
        
        //El 'primer jugador' es 'mano': baraja y reparte las cartas
        //Esto debe mejorarse al pasar a un juego en red.
        jugadores.get(0).Barajar(baraja);
        jugadores.get(0).Repartir(jugadores, baraja);
        
        //Se actualiza la cantidad de cartas en la baraja, en la mano
        // y se activa la botonera.
        ActualizarBaraja();
        ActualizarMano();
        ActivarBotones();
    }
    
    /**
     * Permite actualizar la cantidad de cartas en la baraja y en el mazo.
     */
    private void ActualizarBaraja(){
        //Se obtienen la catidad de cartas en la baraja y en el mazo
        int cantidadB = baraja.cartas.size();
        int cantidadM = mazo.size();
        
        //Visualización de cantidades en la GUI
        lblCartasBaraja.setText(cantidadB+"");
        lblCartasMazo.setText(cantidadM+"");
        
        //Se crea una carta nula
        Carta carta = null;
        
        //Si el mazo no esta vacío, se toma la primer carta
        if(cantidadM > 0){
            carta = mazo.get(0);
            
        }
        else{
            carta = new Carta(0);
        }
        panelMazo.setCarta(carta);
        //btnMazo.ActualizarImagen();
    }
    
    /**
     * Actualiza el contenido de la mano hacia los botones de la baraja
     */
    private void ActualizarMano(){
        ArrayList<Carta> manoJ = jugadores.get(0).getMano();
        Carta carta;
        
        for(int i = 0; i<8; i++){
            if ( i < manoJ.size() ) {
                carta = manoJ.get(i);
            }
            else{
                carta = new Carta(0, "vacia");
            }
            botonesMano[i].setCarta(carta);
        }
        cartasEnMano = manoJ.size();
        DesmarcarTodas();
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblCartasBaraja = new javax.swing.JLabel();
        lblCartasMazo = new javax.swing.JLabel();
        btnTirarCarta = new javax.swing.JButton();
        btnHacerJuego = new javax.swing.JButton();
        panelMazo = new jconga.PanelCarta();
        panelBaraja = new jconga.PanelCarta();
        panelCarta0 = new jconga.PanelCarta();
        panelCarta1 = new jconga.PanelCarta();
        panelCarta2 = new jconga.PanelCarta();
        panelCarta3 = new jconga.PanelCarta();
        panelCarta4 = new jconga.PanelCarta();
        panelCarta5 = new jconga.PanelCarta();
        panelCarta6 = new jconga.PanelCarta();
        panelCarta7 = new jconga.PanelCarta();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(153, 255, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(new java.awt.Dimension(1100, 600));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Baraja");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 70, -1, -1));

        jLabel2.setText("Mazo");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 70, -1, -1));

        lblCartasBaraja.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblCartasBaraja.setText("...");
        getContentPane().add(lblCartasBaraja, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 260, -1, -1));

        lblCartasMazo.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblCartasMazo.setText("...");
        getContentPane().add(lblCartasMazo, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 260, -1, -1));

        btnTirarCarta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jconga/imagen/descartarCarta.png"))); // NOI18N
        btnTirarCarta.setText("Tirar Carta");
        btnTirarCarta.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        btnTirarCarta.setEnabled(false);
        btnTirarCarta.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnTirarCarta.setMaximumSize(new java.awt.Dimension(140, 50));
        btnTirarCarta.setMinimumSize(new java.awt.Dimension(140, 50));
        btnTirarCarta.setPreferredSize(new java.awt.Dimension(140, 50));
        btnTirarCarta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnTirarCartaMouseClicked(evt);
            }
        });
        getContentPane().add(btnTirarCarta, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 470, 140, 50));

        btnHacerJuego.setIcon(new javax.swing.ImageIcon(getClass().getResource("/jconga/imagen/juego.png"))); // NOI18N
        btnHacerJuego.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        btnHacerJuego.setEnabled(false);
        btnHacerJuego.setLabel("Hacer Juego");
        btnHacerJuego.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnHacerJuego.setMaximumSize(new java.awt.Dimension(140, 50));
        btnHacerJuego.setMinimumSize(new java.awt.Dimension(140, 50));
        btnHacerJuego.setPreferredSize(new java.awt.Dimension(140, 50));
        btnHacerJuego.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnHacerJuegoMouseClicked(evt);
            }
        });
        getContentPane().add(btnHacerJuego, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 360, 140, 50));

        panelMazo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelMazoMouseClicked(evt);
            }
        });
        getContentPane().add(panelMazo, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 90, -1, -1));

        panelBaraja.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelBarajaMouseClicked(evt);
            }
        });
        getContentPane().add(panelBaraja, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 90, -1, -1));
        getContentPane().add(panelCarta0, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 360, -1, -1));
        getContentPane().add(panelCarta1, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 360, -1, -1));
        getContentPane().add(panelCarta2, new org.netbeans.lib.awtextra.AbsoluteConstraints(245, 360, -1, -1));
        getContentPane().add(panelCarta3, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 360, -1, -1));
        getContentPane().add(panelCarta4, new org.netbeans.lib.awtextra.AbsoluteConstraints(475, 360, -1, -1));
        getContentPane().add(panelCarta5, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 360, -1, -1));
        getContentPane().add(panelCarta6, new org.netbeans.lib.awtextra.AbsoluteConstraints(705, 360, -1, -1));
        getContentPane().add(panelCarta7, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 360, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Acción cuando el jugador da click en el botón <i>Tirar Carta</i>
     * @param evt 
     */
    private void btnTirarCartaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnTirarCartaMouseClicked
        Carta cartaSel = null;
        
        if (btnTirarCarta.isEnabled()) {
            for (PanelCarta btn: botonesMano) {
                if (btn.seleccionada) {
                    cartaSel = btn.getCarta();
                }
            }

            jugadores.get(0).TirarCarta(cartaSel, mazo);
            DesmarcarTodas();
            ActualizarBaraja();
            ActualizarMano();
            ActivarBotones();   
        }
        
        //ActivarBotones();
    }//GEN-LAST:event_btnTirarCartaMouseClicked

    /**
     * Acción cuando el jugador da click en el botón <i>Hacer Juego</i>
     * @param evt 
     */
    private void btnHacerJuegoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnHacerJuegoMouseClicked

        if (cartasSeleccionadas>2) {
            ArrayList<Carta> juego = new ArrayList<>();
            for(PanelCarta btnCarta:botonesMano){
                if (btnCarta.seleccionada) {
                Carta carta = btnCarta.getCarta();
                juego.add(carta);
                }
            }
       
            ArmarJuego armarJuego = new ArmarJuego(this, true,juego);
            armarJuego.setVisible(true);
        }
        //PrepararJuego prepJuego = new PrepararJuego(juego);
        //prepJuego.setVisible(true);
    }//GEN-LAST:event_btnHacerJuegoMouseClicked

    /**
     * Acción cuando el usuario da click en el mazo, tomando una carta del mismo.
     * @param evt 
     */
    private void panelMazoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelMazoMouseClicked
        
        if( !mazo.isEmpty() ){
            //Carta cartaMazo = mazo.remove(0);
            jugadores.get(0).LevantarCarta(mazo);//mano.add(cartaMazo);
            ActualizarBaraja();
            ActualizarMano();
            ActivarBotones();
        }
    }//GEN-LAST:event_panelMazoMouseClicked

    /**
     * Acción cuando el jugador da click en la baraja, tomando una carta de la misma
     * @param evt 
     */
    private void panelBarajaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelBarajaMouseClicked
        if (jugadores.get(0).CantidadEnMano() <8) {
            //Carta cartaBaraja = baraja.cartas.remove(0);
            jugadores.get(0).LevantarCarta(baraja);//mano.add(cartaBaraja);
            ActualizarBaraja();
            ActualizarMano();
            ActivarBotones();
        }
    }//GEN-LAST:event_panelBarajaMouseClicked

    /**
     * Permite de-seleccionar todas las cartas de la mano del jugador
     */
    private void DesmarcarTodas(){
        cartasSeleccionadas = 0;
        for(PanelCarta btn: botonesMano){
            btn.Seleccionar(false);
        }
    }
    
    /**
     * Permite seleccionar una carta cuando esta es elegida por el jugador
     * @param evt 
     */
    private void CartaSeleccionada(java.awt.event.MouseEvent evt){
        //Se ubica la carta clickeada
        PanelCarta btn = (PanelCarta)evt.getSource();
        btn.Seleccionar();
        //Para Control 
        System.out.println(btn.getCarta().getNumero()+btn.getCarta().getPalo()+":"+btn.seleccionada);
        if (btn.seleccionada) {
            cartasSeleccionadas++;
        }
        else{ 
            cartasSeleccionadas--;
        }
        
        
        ActivarBotones();
        //btn.PonerBordes();
        
        
    }
    
    /**
     * Activa o desactiva los botones de acuerdo a las circunstancias del juego
     */
    private void ActivarBotones(){
        if (cartasEnMano > 7 ) {
            
            if (cartasSeleccionadas == 1) {
                btnTirarCarta.setEnabled(true);
            }
            else{
                btnTirarCarta.setEnabled(false);
            }
            
            if (cartasSeleccionadas > 2) {
                btnHacerJuego.setEnabled(true);
            }
            else{
                btnHacerJuego.setEnabled(false);
            }  
        }
        else{
            btnHacerJuego.setEnabled(false);
            btnTirarCarta.setEnabled(false);
        }
        
        if(cartasEnMano < 8){
            if(mazo.isEmpty()){
                panelMazo.setEnabled(false);
            }
            else{
                panelMazo.setEnabled(true);
            }
        //    
            if (baraja.cartas.isEmpty()) {
                panelBaraja.setEnabled(false);
            }
            else{
                panelBaraja.setEnabled(true);
            }
        }
        else{
             panelBaraja.setEnabled(false);
             panelMazo.setEnabled(false);
        }
        
        System.out.println("Seleccionadas: "+ cartasSeleccionadas);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Base.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Base.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Base.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Base.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Base().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnHacerJuego;
    private javax.swing.JButton btnTirarCarta;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel lblCartasBaraja;
    private javax.swing.JLabel lblCartasMazo;
    private jconga.PanelCarta panelBaraja;
    private jconga.PanelCarta panelCarta0;
    private jconga.PanelCarta panelCarta1;
    private jconga.PanelCarta panelCarta2;
    private jconga.PanelCarta panelCarta3;
    private jconga.PanelCarta panelCarta4;
    private jconga.PanelCarta panelCarta5;
    private jconga.PanelCarta panelCarta6;
    private jconga.PanelCarta panelCarta7;
    private jconga.PanelCarta panelMazo;
    // End of variables declaration//GEN-END:variables
}
